
FROM python:3.10.11-slim-buster



# START ::: args-vars
ARG UID
ARG GID
ARG BASE_PATH
ARG PROJ
ARG ORG_DIR
ARG PROJ_PATH
ARG APPUSR
ARG APPGRP
ARG HOME_PROJ_PATH
ARG MOUNT_WORK_DIR
ARG DOCKER_SHELL
ARG DOCKER_HOME
ARG RUN_SCRIPT
ARG DOCKER_INIT_SCRIPT

ENV MODULE='tpl-gen'
ENV BASE_PATH=$BASE_PATH
ENV ORG=$ORG
ENV PROJ=$PROJ
ENV ORG_DIR=$ORG_DIR
ENV PROJ_PATH=$PROJ_PATH
ENV EDITOR="vim"
ENV APPUSR=$APPUSR
ENV APPGRP=$APPGRP
ENV PS1='`date "+%F %T"` \u@\h  \w \n\n  '
ENV HOME_PROJ_PATH=$HOME_PROJ_PATH
ENV MOUNT_WORK_DIR=$MOUNT_WORK_DIR
ENV DOCKER_SHELL=$DOCKER_SHELL
ENV DOCKER_HOME=$DOCKER_HOME
ENV RUN_SCRIPT=$RUN_SCRIPT
ENV DOCKER_INIT_SCRIPT=$DOCKER_INIT_SCRIPT


VOLUME $MOUNT_WORK_DIR

# STOP  ::: args-vars



# START ::: install alpine OS utils

RUN apt-get update && apt-get install -y --no-install-recommends  \
  perl jq vim wget curl sudo zip unzip make bsdmainutils tzdata
# STOP  ::: install alpine OS utils





# # START ::: python build utils
# RUN RUN apt-get update && apt-get install -y  \
#     build-base gcc openssl-dev python3-dev libmagic  \
#     python3-dev jpeg-dev zlib-dev coreutils libffi-dev util-linux

# # STOP  ::: python build utils


# isntall python pip
RUN wget https://bootstrap.pypa.io/get-pip.py ; sudo python3 get-pip.py ; sudo rm -v get-pip.py

RUN pip3 install --upgrade pip
RUN pip3 install wheel

# START ::: add-os-user
RUN if getent group $GID; then groupmod -g $((GID+3333)) $(getent group $GID | cut -d: -f1); fi
RUN if getent passwd $UID; then usermod -u $((UID+3333)) $(getent passwd $UID | cut -d: -f1); fi

# create a APPGRP and APPUSR
RUN set -x ; groupadd -g "$GID" "$APPGRP" && \
  useradd \
  --gid "$GID" \
  --non-unique \
  --shell "$DOCKER_SHELL" \
  --home-dir "/home/appusr" \
  --uid "$UID" \
  --groups "$APPGRP" "$APPUSR" && exit 0 ; exit 1

# create home directory and change its ownership to APPUSR:APPGRP
RUN mkdir -p "/home/$APPUSR" && chown "$APPUSR":"$APPGRP" "/home/$APPUSR"


RUN echo "$APPUSR ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
RUN echo "export PS1=\"$PS1\"" >> $DOCKER_HOME/.bashrc && \
  chown -R $APPUSR:$APPGRP $DOCKER_HOME && \
  chmod -R 0775 $DOCKER_HOME


USER $APPUSR

# STOP  ::: add-os-user



# START  ::: install-poetry

# Set the Poetry version
ENV POETRY_VERSION=1.5.1

# Check if Poetry is installed and install it if necessary
RUN poetry --version >/dev/null 2>&1 \
  && poetry_version=$(poetry --version | sed -n 's/Poetry version \(.*\)/\1/p') \
  && test "$poetry_version" = "$POETRY_VERSION" \
  || (curl -sSL https://install.python-poetry.org | python - \
  && chmod 775 $HOME/.local/share/pypoetry/venv/bin/poetry )

RUN echo 'export PATH=$PATH:$HOME/.local/bin/' >> $HOME/.bashrc

ENV PATH="${PATH}:/home/${APPUSR}/.local/bin/"


# set the default shell as bash and not sh
SHELL ["/bin/bash", "-c"]

# STOP  ::: install-poetry



# START ::: copy-proj-dir

COPY --chown=$APPUSR:$APPGRP . ${HOME_PROJ_PATH}
COPY --chown=$APPUSR:$APPGRP ./src/bash/run/run.sh ${HOME_PROJ_PATH}/src/bash/run/run.sh

# Create the 'run' symlink
WORKDIR $HOME_PROJ_PATH
RUN ln -sfn src/bash/run/run.sh run


# STOP  ::: copy-proj-dir




RUN pip wheel --use-pep517 "pyyaml (==5.3.1)"
# START ::: install poetry modules in the  module
RUN find $HOME_PROJ_PATH/src/python/ -name "pyproject.toml" -print0 | \
  while IFS= read -r -d '' f; do \
  tgt_dir=$(dirname "$f"); \
  echo "Working on tgt_dir: $tgt_dir"; \
  sudo chmod -R ug+w $tgt_dir; \
  cd "$tgt_dir"; \
  if [ ! -z "${MODULE:-}" ] && [[ "$tgt_dir" == *"$MODULE"* ]]; then \
  test -f poetry.lock && rm -vf poetry.lock; \
  test -d .venv && rm -rv .venv; \
  poetry config virtualenvs.create true; \
  poetry install -vvv; \
  sudo chmod -R ug+w poetry.lock; \
  if [ $? -ne 0 ]; then \
  echo "FATAL: failed to install $tgt_dir py modules"; \
  exit 1; \
  fi; \
  fi; \
  cd -; \
  done
#
# STOP  ::: install poetry modules in the  module




WORKDIR $HOME_PROJ_PATH

RUN chmod 0775 "$HOME_PROJ_PATH/src/bash/scripts/docker-init-${MODULE}.sh"

CMD exec /bin/bash -c "$HOME_PROJ_PATH/src/bash/scripts/docker-init-${MODULE}.sh"
